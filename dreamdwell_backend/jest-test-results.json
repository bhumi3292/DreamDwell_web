{"numFailedTestSuites":1,"numFailedTests":6,"numPassedTestSuites":10,"numPassedTests":84,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":11,"numTotalTests":90,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1752576029917,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Dummy Always Passing Tests"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests 1 + 1 equals 2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"1 + 1 equals 2"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests true is truthy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"true is truthy"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests array includes value","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"array includes value"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests object assignment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"object assignment"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests string match","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"string match"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests null is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"null is null"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests undefined is undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"undefined is undefined"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests zero is falsy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"zero is falsy"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests NaN is NaN","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"NaN is NaN"},{"ancestorTitles":["Dummy Always Passing Tests"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Dummy Always Passing Tests length of string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"length of string"}],"endTime":1752576035490,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\dummyPassing.test.js","startTime":1752576033553,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Property API"],"duration":83,"failureDetails":[],"failureMessages":[],"fullName":"Property API should get all properties","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all properties"},{"ancestorTitles":["Property API"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Property API should get properties with pagination","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get properties with pagination"},{"ancestorTitles":["Property API"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Property API should search properties","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should search properties"},{"ancestorTitles":["Property API"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Property API should filter properties by price","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter properties by price"},{"ancestorTitles":["Property API"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Property API should filter properties by category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter properties by category"}],"endTime":1752576040977,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\propertyController.test.js","startTime":1752576033404,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Calendar API"],"duration":78,"failureDetails":[],"failureMessages":[],"fullName":"Calendar API should require authentication for calendar operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for calendar operations"},{"ancestorTitles":["Calendar API"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Calendar API should require authentication for calendar updates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for calendar updates"},{"ancestorTitles":["Calendar API"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Calendar API should require authentication for calendar deletion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for calendar deletion"},{"ancestorTitles":["Calendar API"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Calendar API should require authentication for calendar range queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for calendar range queries"},{"ancestorTitles":["Calendar API"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Calendar API should validate calendar endpoints require authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate calendar endpoints require authentication"}],"endTime":1752576041004,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\calendarController.test.js","startTime":1752576033394,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Cart API"],"duration":83,"failureDetails":[],"failureMessages":[],"fullName":"Cart API should require authentication for cart operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for cart operations"},{"ancestorTitles":["Cart API"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Cart API should require authentication for adding to cart","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for adding to cart"},{"ancestorTitles":["Cart API"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Cart API should require authentication for cart total","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for cart total"},{"ancestorTitles":["Cart API"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Cart API should require authentication for clearing cart","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for clearing cart"},{"ancestorTitles":["Cart API"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Cart API should validate cart operations require authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate cart operations require authentication"}],"endTime":1752576041026,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cartController.test.js","startTime":1752576033407,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Chatbot API"],"duration":80,"failureDetails":[],"failureMessages":[],"fullName":"Chatbot API should require authentication for chatbot operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for chatbot operations"},{"ancestorTitles":["Chatbot API"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"Chatbot API should validate chatbot endpoint requires authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate chatbot endpoint requires authentication"},{"ancestorTitles":["Chatbot API"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Chatbot API should validate chatbot endpoint exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate chatbot endpoint exists"},{"ancestorTitles":["Chatbot API"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Chatbot API should validate chatbot POST method requires authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate chatbot POST method requires authentication"},{"ancestorTitles":["Chatbot API"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"Chatbot API should validate chatbot endpoint structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate chatbot endpoint structure"}],"endTime":1752576041027,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\chatbotController.test.js","startTime":1752576033576,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Booking API"],"duration":90,"failureDetails":[],"failureMessages":[],"fullName":"Booking API should require authentication for booking operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for booking operations"},{"ancestorTitles":["Booking API"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Booking API should require authentication for creating bookings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for creating bookings"},{"ancestorTitles":["Booking API"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Booking API should require authentication for landlord bookings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for landlord bookings"},{"ancestorTitles":["Booking API"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Booking API should require authentication for booking status updates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for booking status updates"},{"ancestorTitles":["Booking API"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Booking API should require authentication for booking cancellation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for booking cancellation"},{"ancestorTitles":["Booking API"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Booking API should require authentication for booking deletion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for booking deletion"}],"endTime":1752576041096,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\bookingController.test.js","startTime":1752576033353,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Payment API"],"duration":82,"failureDetails":[],"failureMessages":[],"fullName":"Payment API should require authentication for payment history","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for payment history"},{"ancestorTitles":["Payment API"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Payment API should require authentication for payment details","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for payment details"},{"ancestorTitles":["Payment API"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Payment API should require authentication for payment cancellation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for payment cancellation"},{"ancestorTitles":["Payment API"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Payment API should validate payment endpoints require authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate payment endpoints require authentication"},{"ancestorTitles":["Payment API"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Payment API should validate payment endpoint structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate payment endpoint structure"}],"endTime":1752576041099,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\paymentController.test.js","startTime":1752576033395,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Category API"],"duration":131,"failureDetails":[],"failureMessages":[],"fullName":"Category API should create a new category","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create a new category"},{"ancestorTitles":["Category API"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"Category API should not create duplicate category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not create duplicate category"},{"ancestorTitles":["Category API"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"Category API should get all categories","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all categories"},{"ancestorTitles":["Category API"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Category API should get a category by id","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get a category by id"},{"ancestorTitles":["Category API"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"Category API should return 404 for non-existent category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent category"},{"ancestorTitles":["Category API"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"Category API should update a category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update a category"},{"ancestorTitles":["Category API"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"Category API should return 404 when updating non-existent category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 when updating non-existent category"},{"ancestorTitles":["Category API"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Category API should delete a category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should delete a category"},{"ancestorTitles":["Category API"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"Category API should return 404 for deleted category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 for deleted category"},{"ancestorTitles":["Category API"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Category API should return 404 when deleting non-existent category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 when deleting non-existent category"}],"endTime":1752576041110,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\categoryController.test.js","startTime":1752576033519,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Chat Controller"],"duration":91,"failureDetails":[],"failureMessages":[],"fullName":"Chat Controller should require authentication for chat operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for chat operations"},{"ancestorTitles":["Chat Controller"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Chat Controller should require authentication for creating chats","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for creating chats"},{"ancestorTitles":["Chat Controller"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Chat Controller should require authentication for getting chat messages","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for getting chat messages"},{"ancestorTitles":["Chat Controller"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Chat Controller should require authentication for sending messages","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for sending messages"},{"ancestorTitles":["Chat Controller"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Chat Controller should require authentication for chat deletion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require authentication for chat deletion"},{"ancestorTitles":["Chat Controller"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Chat Controller should validate chat endpoints require authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate chat endpoints require authentication"}],"endTime":1752576041220,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\chatController.test.js","startTime":1752576033405,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Cart API"],"duration":16,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '_id')\n    at Object.<anonymous> (E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cart.test.js:91:48)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Cart API should allow a tenant to add a property to their cart","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should allow a tenant to add a property to their cart"},{"ancestorTitles":["Cart API"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '_id')\n    at Object.<anonymous> (E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cart.test.js:91:48)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Cart API should prevent adding the same property twice to cart","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should prevent adding the same property twice to cart"},{"ancestorTitles":["Cart API"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '_id')\n    at Object.<anonymous> (E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cart.test.js:91:48)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Cart API should allow a tenant to remove a property from their cart","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should allow a tenant to remove a property from their cart"},{"ancestorTitles":["Cart API"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '_id')\n    at Object.<anonymous> (E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cart.test.js:91:48)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Cart API should get an empty cart for a tenant with no items","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should get an empty cart for a tenant with no items"},{"ancestorTitles":["Cart API"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '_id')\n    at Object.<anonymous> (E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cart.test.js:91:48)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Cart API should return 401 if unauthorized user tries to access cart endpoints","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return 401 if unauthorized user tries to access cart endpoints"},{"ancestorTitles":["Cart API"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '_id')\n    at Object.<anonymous> (E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cart.test.js:91:48)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Cart API should get cart with multiple items","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should get cart with multiple items"}],"endTime":1752576041799,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCart API › should allow a tenant to add a property to their cart\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '_id')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 |\u001b[39m             videos\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 90 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 |\u001b[39m     propertyId1 \u001b[33m=\u001b[39m createPropertyRes1\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39m_id\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m     \u001b[36mconst\u001b[39m createPropertyRes2 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m         \u001b[33m.\u001b[39mpost(\u001b[32m\"/api/properties\"\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/cart.test.js\u001b[39m\u001b[0m\u001b[2m:91:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCart API › should prevent adding the same property twice to cart\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '_id')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 |\u001b[39m             videos\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 90 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 |\u001b[39m     propertyId1 \u001b[33m=\u001b[39m createPropertyRes1\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39m_id\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m     \u001b[36mconst\u001b[39m createPropertyRes2 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m         \u001b[33m.\u001b[39mpost(\u001b[32m\"/api/properties\"\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/cart.test.js\u001b[39m\u001b[0m\u001b[2m:91:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCart API › should allow a tenant to remove a property from their cart\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '_id')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 |\u001b[39m             videos\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 90 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 |\u001b[39m     propertyId1 \u001b[33m=\u001b[39m createPropertyRes1\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39m_id\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m     \u001b[36mconst\u001b[39m createPropertyRes2 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m         \u001b[33m.\u001b[39mpost(\u001b[32m\"/api/properties\"\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/cart.test.js\u001b[39m\u001b[0m\u001b[2m:91:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCart API › should get an empty cart for a tenant with no items\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '_id')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 |\u001b[39m             videos\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 90 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 |\u001b[39m     propertyId1 \u001b[33m=\u001b[39m createPropertyRes1\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39m_id\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m     \u001b[36mconst\u001b[39m createPropertyRes2 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m         \u001b[33m.\u001b[39mpost(\u001b[32m\"/api/properties\"\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/cart.test.js\u001b[39m\u001b[0m\u001b[2m:91:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCart API › should return 401 if unauthorized user tries to access cart endpoints\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '_id')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 |\u001b[39m             videos\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 90 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 |\u001b[39m     propertyId1 \u001b[33m=\u001b[39m createPropertyRes1\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39m_id\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m     \u001b[36mconst\u001b[39m createPropertyRes2 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m         \u001b[33m.\u001b[39mpost(\u001b[32m\"/api/properties\"\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/cart.test.js\u001b[39m\u001b[0m\u001b[2m:91:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCart API › should get cart with multiple items\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '_id')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 |\u001b[39m             videos\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 90 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 |\u001b[39m     propertyId1 \u001b[33m=\u001b[39m createPropertyRes1\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39m_id\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 92 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m     \u001b[36mconst\u001b[39m createPropertyRes2 \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m         \u001b[33m.\u001b[39mpost(\u001b[32m\"/api/properties\"\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/cart.test.js\u001b[39m\u001b[0m\u001b[2m:91:48)\u001b[22m\u001b[2m\u001b[22m\n","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\cart.test.js","startTime":1752576033315,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Auth, Category, and Basic Property API Tests","User Authentication API"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests User Authentication API should validate missing fields while creating user","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should validate missing fields while creating user"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","User Authentication API"],"duration":191,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests User Authentication API should create a user with all fields","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a user with all fields"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","User Authentication API"],"duration":167,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests User Authentication API should login a user with valid credentials (landlord)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should login a user with valid credentials (landlord)"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Password Reset Flow"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Password Reset Flow should request password reset link","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should request password reset link"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Password Reset Flow"],"duration":349,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Password Reset Flow should reset password with valid token","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should reset password with valid token"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Password Reset Flow"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Password Reset Flow should fail reset with invalid token","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should fail reset with invalid token"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should create a new category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a new category"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should not create duplicate category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not create duplicate category"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should fetch all categories","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should fetch all categories"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should fetch category by ID","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fetch category by ID"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should return 404 for non-existent category ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent category ID"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should update a category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update a category"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should delete a category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should delete a category"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Category API"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Category API should 404 deleting non-existent category","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should 404 deleting non-existent category"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Property API (Basic)"],"duration":44,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Property API (Basic) should get all properties","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should get all properties"},{"ancestorTitles":["Auth, Category, and Basic Property API Tests","Property API (Basic)"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Auth, Category, and Basic Property API Tests Property API (Basic) should 404 deleting non-existent property","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should 404 deleting non-existent property"},{"ancestorTitles":["Cart API Tests"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should return an empty cart for a new user","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"should return an empty cart for a new user"},{"ancestorTitles":["Cart API Tests"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should add a property to cart and create a new cart if none exists","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should add a property to cart and create a new cart if none exists"},{"ancestorTitles":["Cart API Tests"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should not add a property that is already in the cart","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should not add a property that is already in the cart"},{"ancestorTitles":["Cart API Tests"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should retrieve cart with added items","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should retrieve cart with added items"},{"ancestorTitles":["Cart API Tests"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should remove a property from the cart","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should remove a property from the cart"},{"ancestorTitles":["Cart API Tests"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should return 404 when trying to remove a property not in cart","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 when trying to remove a property not in cart"},{"ancestorTitles":["Cart API Tests"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should clear all items from the cart","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should clear all items from the cart"},{"ancestorTitles":["Cart API Tests"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should return 404 when trying to clear a non-existent cart","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 when trying to clear a non-existent cart"},{"ancestorTitles":["Cart API Tests"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should return 400 if propertyId is missing when adding to cart","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 400 if propertyId is missing when adding to cart"},{"ancestorTitles":["Cart API Tests"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should return 404 if property does not exist when adding to cart","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return 404 if property does not exist when adding to cart"},{"ancestorTitles":["Cart API Tests"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"Cart API Tests should return 401 if no token is provided for cart routes","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return 401 if no token is provided for cart routes"}],"endTime":1752576043173,"message":"","name":"E:\\DreamDwell_web\\dreamdwell_backend\\tests\\user.test.js","startTime":1752576033337,"status":"passed","summary":""}],"wasInterrupted":false}
